# -*- coding: utf-8 -*-
"""Haralick  RGB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KSCavUooowsH4ufTxSTmNQ9rHnri8jum
"""

!pip install mahotas

########## HARALICK ##########
from google.colab import drive
drive.mount('/content/drive')

########## imports ##########
import cv2
import numpy as np
from sklearn.svm import SVC
from sklearn.multiclass import OneVsRestClassifier
from sklearn.metrics import accuracy_score
import mahotas 
import csv

########## constantes ##########
PATH_BASE = "/content/drive/MyDrive/Colab Notebooks/Outex_TC_00014/"
CSV_PRUEBA = "/content/drive/MyDrive/Colab Notebooks/resultados/haralick/vector_prueba_Outex_TC_00014.csv"
CSV_ENTRENAMIENTO = "/content/drive/MyDrive/Colab Notebooks/resultados/haralick/vector_entrenamiento_Outex_TC_00014.csv"
CSV_TITULOS = ["CLASE", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13"]

########## Funciones ##########
def leer_imagenes(txt): # txt: archivo.txt
  labels = np.array([])

  # Lectura de nombres de archivos de entrenamiento
  f = open(PATH_BASE + "000/" + txt,"r")
  lineas = f.readlines()

  imagenes = []
  for i in range(1, len(lineas)):
    nombreArchivo = lineas[i].split()[0]
    labels = np.append(labels, lineas[i].split()[1])
    path = PATH_BASE + "images/" + nombreArchivo
    img = cv2.imread(path)
    imagenes.append(img)
  return imagenes, labels # retorna un array de imágenes y un array de nombre de clases

def extraer_haralick_features(imagenes, labels):
  labels_RGB = []
  features_imagenes = []
  for i in range(len(imagenes)):
    imagen = imagenes[i]

    b,g,r = cv2.split(imagen)

    des_b = mahotas.features.haralick(b).mean(axis=0)
    features_imagenes.append(des_b)
    labels_RGB.append(labels[i])

    des_g = mahotas.features.haralick(g).mean(axis=0)
    features_imagenes.append(des_g)
    labels_RGB.append(labels[i])

    des_r = mahotas.features.haralick(r).mean(axis=0)
    features_imagenes.append(des_r)
    labels_RGB.append(labels[i])
      
  return features_imagenes, labels_RGB

def entrenamiento(imagenes_entrenamiento, labels_entrenamiento):
  # Extracción de features de las imágenes de entrenamiento
  features_imagenes, labels_entrenamiento_RGB = extraer_haralick_features(imagenes_entrenamiento, labels_entrenamiento)

  # creación archivo de vector de caracteristicas
  with open(CSV_ENTRENAMIENTO,'w+') as f2:
    w = csv.writer(f2)
    titulos = CSV_TITULOS
    w.writerow(titulos)
    for i in range(len(features_imagenes)):
      fila = []
      fila.append(labels_entrenamiento_RGB[i])
      fila = fila + features_imagenes[i].tolist()
      w.writerow(fila)

  # Entrenar clasificador
  svm = OneVsRestClassifier(SVC(kernel = 'linear'))
  svm.fit(features_imagenes, labels_entrenamiento_RGB)
  
  return svm

def prueba(imagenes_prueba, labels_prueba, svm):
  # Extracción de features de las imágenes de prueba
  features_imagenes, labels_prueba_RGB  = extraer_haralick_features(imagenes_prueba, labels_prueba)

  # creación archivo de vector de caracteristicas
  with open(CSV_PRUEBA,'w+') as f2:
    w = csv.writer(f2)
    titulos = CSV_TITULOS
    w.writerow(titulos)
    for i in range(len(features_imagenes)):
      fila = []
      fila.append(labels_prueba_RGB[i])
      fila = fila + features_imagenes[i].tolist()
      w.writerow(fila)

  # Predicciones utilizando SVM
  predicciones = svm.predict(features_imagenes)

  # Resultados
  exactitud = accuracy_score(labels_prueba_RGB, predicciones)
  print ('Exactitud: %0.3f' % exactitud)
  return exactitud

def main(imagenes_entrenamiento, labels_entrenamiento, imagenes_prueba, labels_prueba):
  print("Entrenamiento...")
  svm = entrenamiento(imagenes_entrenamiento, labels_entrenamiento)

  print("Prueba...")
  exactitud = prueba(imagenes_prueba, labels_prueba, svm)
  return exactitud

#Leer imágenes de entrenamiento (una sola vez)
print("Lectura de imágenes de entrenamiento....")
imagenes_entrenamiento, labels_entrenamiento =  leer_imagenes("train.txt")
print("Cantidad de imágenes de entrenamiento:",  len(imagenes_entrenamiento))

# Lectura de imágenes de prueba (una sola vez)
print("Lectura de imágenes de prueba....")
imagenes_prueba, labels_prueba =  leer_imagenes("test.txt")
print("Cantidad de imágenes de prueba:",  len(imagenes_prueba))

exactitud = main(imagenes_entrenamiento, labels_entrenamiento, imagenes_prueba, labels_prueba)

print(exactitud)